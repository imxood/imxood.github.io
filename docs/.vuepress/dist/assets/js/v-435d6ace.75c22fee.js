(self.webpackChunkimxood_github_io=self.webpackChunkimxood_github_io||[]).push([[8],{333:(e,n,t)=>{"use strict";t.r(n),t.d(n,{data:()=>r});const r={key:"v-435d6ace",path:"/lang/rust/basic.html",title:"Rust 学习笔记",lang:"zh-CN",frontmatter:{lastUpdated:!0},excerpt:"",headers:[{level:2,title:"Rust 的 安装与卸载",slug:"rust-的-安装与卸载",children:[]},{level:2,title:"使用特定的 rust 版本",slug:"使用特定的-rust-版本",children:[]},{level:2,title:"vscode 中 rust 的插件",slug:"vscode-中-rust-的插件",children:[]},{level:2,title:"Rust hello_world",slug:"rust-hello-world",children:[]},{level:2,title:"使用 Cargo 创建项目",slug:"使用-cargo-创建项目",children:[]},{level:2,title:"库",slug:"库",children:[]},{level:2,title:"GUI 开发",slug:"gui-开发",children:[{level:3,title:"iced",slug:"iced",children:[]},{level:3,title:"iced: 编译 并 运行所有的 examples",slug:"iced-编译-并-运行所有的-examples",children:[]},{level:3,title:"iced 例子",slug:"iced-例子",children:[]},{level:3,title:"bevy, 游戏引擎",slug:"bevy-游戏引擎",children:[]}]},{level:2,title:"libusb, usb库",slug:"libusb-usb库",children:[]},{level:2,title:"wasm 开发",slug:"wasm-开发",children:[]},{level:2,title:"vue vite rust wasm",slug:"vue-vite-rust-wasm",children:[]}],filePathRelative:"lang/rust/basic.md",git:{updatedTime:null,contributors:[]}}},758:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const r=(0,t(252).uE)('<h1 id="rust-学习笔记"><a class="header-anchor" href="#rust-学习笔记">#</a> Rust 学习笔记</h1><h2 id="rust-的-安装与卸载"><a class="header-anchor" href="#rust-的-安装与卸载">#</a> Rust 的 安装与卸载</h2><pre><code>参考链接:\n    https://www.rust-lang.org/zh-CN/tools/install\n\n安装:\n    curl --proto &#39;=https&#39; --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\n版本号:\n    rustc --version\n\n升级:\n    rustup update stable\n    rustup update\n\n使用 不同 版本:\n    rustup default stable\n    rustup default nightly\n\n添加工具:\n    cargo install cargo-generate\n    cargo install cargo-edit\n    cargo install mdbook\n\n卸载:\n    rustup self uninstall\n</code></pre><h2 id="使用特定的-rust-版本"><a class="header-anchor" href="#使用特定的-rust-版本">#</a> 使用特定的 rust 版本</h2><pre><code>参考: https://doc.rust-lang.org/edition-guide/rust-2018/rustup-for-managing-rust-versions.html\n\nrustup toolchain install nightly-2020-11-19\nrustup toolchain list\nrustup default nightly-2020-11-19\n\nps:\n    &quot;2020-11-19&quot; 这个时间是在 rust 的 git 中的tag上找的\n\n# 安装 nightly 版本的工具链\nrustup toolchain install nightly\n\n# 对当前项目使用 nightly\nrustup override set nightly\n\n# 对所有项目使用 nightly\nrustup default nightly\n\n# 工具\nrustup component add clippy\n\n## riscv\nrustup target add riscv32imac-unknown-none-elf\n</code></pre><h2 id="vscode-中-rust-的插件"><a class="header-anchor" href="#vscode-中-rust-的插件">#</a> vscode 中 rust 的插件</h2><pre><code>1. rust-analyzer\n2. Crates\n3. Better TOML\n4. CodeLLDB\n</code></pre><h2 id="rust-hello-world"><a class="header-anchor" href="#rust-hello-world">#</a> Rust hello_world</h2><pre><code>编写点一个程序:\n    vim main.rs\n\n    fn main() {\n        println!(&quot;Hello, world!&quot;);\n    }\n\n编译:\n    rustc main.rs\n\n运行:\n    ./main\n</code></pre><h2 id="使用-cargo-创建项目"><a class="header-anchor" href="#使用-cargo-创建项目">#</a> 使用 Cargo 创建项目</h2><pre><code>创建项目 hello_cargo:\n    cargo new hello_cargo\n\ncd hello_cargo\n\n编译 并生成可执行程序:\n    cargo build\n    cargo build --release\n\n编译 但不生成 可执行程序:\n    cargo check\n\n运行目标程序 (也可以一步构建项目):\n    cargo run\n\n创建:\n    cargo new hello_world &lt;--bin&gt;, 创建一个二进制程序\n    cargo new hello_world --lib, 创建一个库\n</code></pre><h2 id="库"><a class="header-anchor" href="#库">#</a> 库</h2><pre><code>kurbo\n    曲线工具\n\nlyon\n    路径细分库, 可以用于基于GPU的2D图形渲染\n\n\ntokio\n    https://github.com/tokio-rs/tokio\n\nembedded_graphics\n    mcu gui\n\nembedded_sdmmc\n</code></pre><h2 id="gui-开发"><a class="header-anchor" href="#gui-开发">#</a> GUI 开发</h2><h3 id="iced"><a class="header-anchor" href="#iced">#</a> iced</h3><pre><code>sudo apt install libssl-dev\n\n官方的例子:\n\n    git clone https://github.com/hecrj/iced.git\n\n    cd iced\n\n    cargo build\n\n    // --features glow,glow_canvas\n    cargo run --package todos\n\n// 如果无法运行, 就安装下面的软件包\nsudo apt install libvulkan1 mesa-vulkan-drivers vulkan-utils\n</code></pre><h3 id="iced-编译-并-运行所有的-examples"><a class="header-anchor" href="#iced-编译-并-运行所有的-examples">#</a> iced: 编译 并 运行所有的 examples</h3><pre><code>#!/bin/bash\n\nexamples=(iced_core iced_futures iced_graphics iced_native iced_style iced_glow iced_glutin iced_winit iced_web iced_wgpu bezier_tool iced clock color_palette counter custom_widget download_progress events game_of_life geometry integration pane_grid pick_list pokedex progress_bar qr_code scrollable solar_system stopwatch styling svg todos tour)\n\nfor example in ${examples[@]}; do\n    cargo build --verbose --package $example\ndone\n\nfor example in ${examples[@]}; do\n    echo &quot;start run: cargo run --verbose --package $example&quot;\n    cargo run --verbose --package $example\ndone\n</code></pre><h3 id="iced-例子"><a class="header-anchor" href="#iced-例子">#</a> iced 例子</h3><pre><code>学习基本的布局:\n    target/debug/pane_grid\n    examples/tour\n\n学习canvas:\n    examples/clock\n</code></pre><h3 id="bevy-游戏引擎"><a class="header-anchor" href="#bevy-游戏引擎">#</a> bevy, 游戏引擎</h3><pre><code>git clone https://github.com/bevyengine/bevy\ncargo run --example breakout\n</code></pre><h2 id="libusb-usb库"><a class="header-anchor" href="#libusb-usb库">#</a> libusb, usb库</h2><pre><code>在windows上找不到libusb库, 在 ~/.cargo/config 中添加:\n\n[target.x86_64-pc-windows-msvc.&#39;usb-1.0&#39;]\nrustc-link-search = [&#39;D:\\libs\\64bit&#39;]\nrustc-link-lib = [&#39;libusb-1.0&#39;]\n</code></pre><h2 id="wasm-开发"><a class="header-anchor" href="#wasm-开发">#</a> wasm 开发</h2><pre><code>安装 wasm-pack:\n\n    curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n\ncargo install cargo-generate\n\ncargo generate --git https://github.com/rustwasm/wasm-pack-template -n wasm-app\n\ncd wasm-app\nwasm-pack build\n\nnpm init wasm-app www\n\ncd www\nyarn\n\ncd ../pkg\nyarn link\n\ncd ../www\nyarn link &quot;wasm-app&quot;\n</code></pre><h2 id="vue-vite-rust-wasm"><a class="header-anchor" href="#vue-vite-rust-wasm">#</a> vue vite rust wasm</h2><pre><code>yarn create @vitejs/app my-vue-app --template vue\n\ncd my-vue-app\nyarn add -D vite-plugin-rsw\n\nyarn\n\ncargo generate --git https://github.com/rustwasm/wasm-pack-template -n wasm-app\n\nvite.config.js:\n\n    import { defineConfig } from &quot;vite&quot;;\n    import vue from &quot;@vitejs/plugin-vue&quot;;\n    import ViteRsw from &#39;vite-plugin-rsw&#39;;\n\n    // https://vitejs.dev/config/\n    export default defineConfig({\n        plugins: [\n            vue(),\n            ViteRsw({\n                mode: &quot;release&quot;,\n                crates: [&quot;wasm-app&quot;],\n            }),\n        ],\n    });\n</code></pre>',28),a={render:function(e,n){return r}}}}]);