<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 分享生活,分享感动</title>
    <link>http://imxood.github.io/post/</link>
    <description>Recent content in Posts on 分享生活,分享感动</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Apr 2019 19:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://imxood.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编译工具</title>
      <link>http://imxood.github.io/post/google-colab%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 17 Apr 2019 19:00:00 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/google-colab%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>编译工具</title>
      <link>http://imxood.github.io/post/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 17 Apr 2019 19:00:00 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</guid>
      <description>test code &amp;ndash; hello.c: #include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;quot;hello, the world!\n&amp;quot;); return 0; }  gcc  -E Preprocess only; do not compile, assemble or link -S Compile only; do not assemble or link -c Compile and assemble, but do not link -o &amp;lt;file&amp;gt; Place the output into &amp;lt;file&amp;gt;  imxood@imxood-pc:~/develop$ gcc -c hello.c # get hello.o, and executable hello  readelf  -a --all Equivalent to: -h -l -S -s -r -d -V -A -I -h --file-header Display the ELF file header -l --program-headers Display the program headers --segments An alias for --program-headers -S --section-headers Display the sections&#39; header --sections An alias for --section-headers -g --section-groups Display the section groups -t --section-details Display the section details -e --headers Equivalent to: -h -l -S -s --syms Display the symbol table  imxood@imxood-pc:~/develop$ readelf -h hello.</description>
    </item>
    
    <item>
      <title>QT</title>
      <link>http://imxood.github.io/post/qt/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/qt/</guid>
      <description>qt环境配置: sudo vim /usr/lib/x86_64-linux-gnu/qt-default/qtchooser/default.conf: /home/maxu/programs/Qt/5.9.1/gcc_64/bin /home/maxu/programs/Qt/5.9.1/gcc_64 vim ~/.bashrc: QTDIR=/home/maxu/programs/Qt/5.9.3/gcc_64 PATH=$QTDIR/bin:$PATH LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH export QTDIR PATH LD_LIBRARY_PATH sudo add-apt-repository ppa:beineri/opt-qt593-xenial sudo apt-get update sudo apt-get install -y qt59-meta-full qt59creator  qt环境变量 export QTDIR=$HOME/programs/Qt/5.11.1/gcc_64 export PATH=$QTDIR/bin:$PATH export MANPATH=$QTDIR/man:$MANPATH export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH  中文无法输入: sudo apt-get install fcitx-libs-qt fcitx-libs-qt5 cp /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so \ /home/peak/programs/Qt5.9.1/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts chmod +x /home/peak/programs/Qt5.9.1/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so  qt creator 5.9 中文输入: git clone http://github.com/fcitx/fcitx-qt5.git
cp /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so /home/peak/programs/Qt/5.9.3/gcc_64/plugins/platforminputcontexts/ chmod +x /home/peak/programs/Qt/5.9.3/gcc_64/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so  PYTHON_CONFIGURE_OPTS=&amp;ldquo;&amp;ndash;enable-shared&amp;rdquo; pyenv install 3.</description>
    </item>
    
    <item>
      <title>STM32学习笔记</title>
      <link>http://imxood.github.io/post/stm32/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/stm32/</guid>
      <description>使用STM32CubeMX生成项目时,在Makefile中配置:
 BINPATH 删除三行:Src/stm32f1xx_it.c、stm32f1xx_hal_msp.c、Src/main.c、Src/stm32f1xx_hal_msp.c  使用cortex-debug插件调试
 在STM32CubeMX的Makefile项目中添加FreeRTOS 添加源文件到C_SOURCES 添加头文件到C_INCLUDES
  使用openocd的stlink调试器: openocd -f /usr/local/share/openocd/scripts/interface/stlink.cfg -f /usr/local/share/openocd/scripts/target/stm32f7x.cfg
vscoe, 配置stm32 debug { &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;, &amp;quot;configurations&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;stm32 debug&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;, &amp;quot;targetArchitecture&amp;quot;: &amp;quot;arm&amp;quot;, &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/build/f767demo.elf&amp;quot;, &amp;quot;args&amp;quot;: [], &amp;quot;stopAtEntry&amp;quot;: false, &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;, &amp;quot;environment&amp;quot;: [], &amp;quot;externalConsole&amp;quot;: false, &amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;, &amp;quot;miDebuggerPath&amp;quot;: &amp;quot;${env:HOME}/programs/gcc-arm-none-eabi-7-2017-q4-major/bin/arm-none-eabi-gdb&amp;quot;, &amp;quot;setupCommands&amp;quot;: [ { &amp;quot;description&amp;quot;: &amp;quot;Enable pretty-printing for gdb&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;-enable-pretty-printing&amp;quot;, &amp;quot;ignoreFailures&amp;quot;: true }, { &amp;quot;text&amp;quot;: &amp;quot;file ${workspaceFolder}/build/f767demo.</description>
    </item>
    
    <item>
      <title>blender基本教程</title>
      <link>http://imxood.github.io/post/blender/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/blender/</guid>
      <description>#安装blender
1, 官网下载
2, 添加源: $ sudo add-apt-repository ppa:thomas-schiex/blender $ sudo apt update &amp;amp;&amp;amp; sudo apt install blender -y
常用快捷键 Shift A 添加物体 Shift S 吸附, 设置游标或选中项的吸附关系 Alt D 复制物体, 有关联的 Shift D 复制物体, 全新的 Ctrl 鼠标中键，在面板上拖动，面板缩放 Ctrl 鼠标左键，拖动视口上的三根横线，选择多个物体 Shift 鼠标中键, 拖动视口 Ctrl A 应用&amp;quot;位移&amp;quot;: 把自身坐标系原点设置到(0,0,0)的位置上 应用&amp;quot;旋转&amp;quot;: 把旋转设置为(0°,0°,0°) 应用&amp;quot;比例&amp;quot;: 把比例设置为(1,1,1),原来的比例转换为尺寸变化 编辑模式下选择多个边, 按F, 可创建面 编辑模式: S 3, 3倍尺寸, w细分, Shift R重复操作, Ctrl F面, 尖分化, Shift G, 连接边数量, G Z z坐标全局变化, Ctrl 2光滑显示, Alt 右击选择外轮廓, AA, Ctrl B倒角, 按住Shift微调 Ctrl V顶点, B或Ctrl 左键点击框选, Ctrl Shift B整体放大, Shift G, 相邻面数量, 选择面, 点击一个面, Shift G, *Area, i内插面  , F6, 各面 Ctrl J 把多个物体合并成一个</description>
    </item>
    
    <item>
      <title>c,cxx笔记</title>
      <link>http://imxood.github.io/post/ccxx/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/ccxx/</guid>
      <description>c,cxx笔记 关于inline 1.如果将函数的实现放在头文件，并且标记为 inline 那么每一个包含该头文件的cpp文件都将得到一份关于该函数的定义，并且链接器不会报错。 2.如果将函数的实现放在cpp文件中，并且标记为inline, 那么该函数对其他编译单元不可见，也就是其他cpp文件不能连接该函数库。若链接会出现undefined reference a.对于同一个文件来说，inline函数相对于extern函数是建议编译器内联展开； b.编译器一定会为该inline函数生成独立汇编代码，让外部文件调用该汇编代码，而不是让外部文件内联展开； c.inline函数是全局的，即和普通extern函数全局属性类似； d.当外部文件中有同名的非inline函数时，重定义错误；只定义inline函数会有undefined reference错误；  extern 表明引用外部对象 c++中的vtable 虚函数
c++函数绑定:
1,普通函数 boost::functionfunc1; func1 = fsum; std::cout &amp;lt;&amp;lt; &amp;ldquo;4 + 5 = &amp;rdquo; &amp;lt;&amp;lt; func1(4, 5) &amp;lt;&amp;lt; std::endl;
2,成员函数 boost::functionfunc2; func2 = &amp;amp;Car::info; Car car; func2(&amp;amp;car, 25);</description>
    </item>
    
    <item>
      <title>c_cxx_asm</title>
      <link>http://imxood.github.io/post/c_cxx_asm/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/c_cxx_asm/</guid>
      <description>int snprintf(char *str, size_t size, const char *format, ...) (1) 如果格式化后的字符串长度 &amp;lt; size，则将此字符串全部复制到str中，并给其后添加一个字符串结束符(&#39;\0&#39;) (2) 如果格式化后的字符串长度 &amp;gt;= size，则只将其中的(size-1)个字符复制到str中，并给其后添加一个字符串结束符(&#39;\0&#39;)，返回值为欲写入的字符串长度 void *memcpy(void *dest, const void *src, size_t n); 从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中 任务对象: (k-v)多个消息队列 msg_queue_-&amp;gt;message_count() Message_Block[] release m_pVoiceBuff Message_Block SendVoiceToTaskQue(m_pVoiceBuff, nActualVoiceBufLen); while(isRun){ } 单元测试很重要 static std::string UrlEncode(const std::string &amp;amp;str) { std::string strTemp = &amp;quot;&amp;quot;; size_t length = str.length(); for (size_t i = 0; i &amp;lt; length; i++) { if (isalnum((unsigned char)str[i]) || (str[i] == &#39;-&#39;) || (str[i] == &#39;_&#39;) || (str[i] == &#39;.</description>
    </item>
    
    <item>
      <title>electron教程</title>
      <link>http://imxood.github.io/post/electron/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/electron/</guid>
      <description> 在electron中使用nodejs的serialport模块 git clone https://github.com/electron/electron-quick-start.git npm install npm install --save serialport npm install --save-dev electron-rebuild ./node_modules/.bin/electron-rebuild -v 3.0.4 ps: 注意3.0.4是electron的版本号, 用npm ls electron查看  </description>
    </item>
    
    <item>
      <title>hugo简明教程</title>
      <link>http://imxood.github.io/post/hugo%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/hugo%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid>
      <description>安装hugo
sudo apt install hugo  创建新站点
hugo new site www, ps: 子命令： new 新的, 创建类型:site, 创建目标路径: ./www  写文章:
hugo new post/first.md 在后面添加一下内容: # Hello. the world!  使用主题:
git clone https://github.com/imxood/hugo-theme-slim.git themes/slim  启动本地调试:
hugo server --theme=slim --buildDrafts ps: --theme=slim 指定使用&amp;quot;slim&amp;quot;主题, &amp;quot;--buildDrafts&amp;quot; 编译草稿, &amp;quot;--watch&amp;quot; 实时刷新页面  做一些配置:
vim config.toml 它的基本内容是: baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot; languageCode = &amp;quot;en-us&amp;quot; title = &amp;quot;My New Hugo Site&amp;quot; 修改成你需要的相关信息, 如我的配置: baseurl = &amp;quot;http://imxood.</description>
    </item>
    
    <item>
      <title>linux 声卡驱动</title>
      <link>http://imxood.github.io/post/alsa/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/alsa/</guid>
      <description> linux 基本使用 # list device names $ arecord -L # list all soundcards and digital audio devices $ arecord -l  </description>
    </item>
    
    <item>
      <title>linux命令</title>
      <link>http://imxood.github.io/post/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/linux%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;h3 id=&#34;指定用户登出&#34;&gt;指定用户登出&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pkill -kill -t tty
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;grep技巧-r-递归-i-忽略大小写-n-显示行数-exclude-dir-排除目录-e-表示可扩展的正则表达式&#34;&gt;grep技巧, -r 递归, -i 忽略大小写, -n 显示行数, &amp;ndash;exclude-dir 排除目录, -E 表示可扩展的正则表达式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo grep &amp;quot;ss-qt5&amp;quot; / -r -i -n --exclude-dir={proc,sys}
echo aabbccddbbee | awk &#39;{split($0,arr,&amp;quot;bb&amp;quot;);for(i in arr) print arr[i]}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu-install-tigervnc&#34;&gt;ubuntu install tigervnc&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install tightvncserver

E: dpkg was interrupted, you must manually run &#39;sudo dpkg --configure -a&#39; to correct the problem.

run:
sudo dpkg --configure -a

sudo apt-get install tightvncserver
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看所有网卡&#34;&gt;查看所有网卡&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ifconfig -a
cat /proc/net/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu-重启网络&#34;&gt;ubuntu 重启网络&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo service networking restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;设置开机启动以太网eth0&#34;&gt;设置开机启动以太网eth0:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/network/interfaces
自启动eth0, 并设置eth0为ip4, 自动分配ip:
    auto eth0
    iface eth0 inet dhcp

自启动eth0, 并设置eth0为ip4, 静态ip:
    auto eth0
    iface eth0 inet static
        address 192.10.1.2
        netmask 255.255.255.0
        gateway 192.10.1.254
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssh安装&#34;&gt;ssh安装&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install openssh-server
sudo vim /etc/ssh/sshd_config
把配置文件中的&amp;quot;PermitRootLogin without-password&amp;quot;加一个&amp;quot;#&amp;quot;号,
再增加一句&amp;quot;PermitRootLogin yes&amp;quot;,
保存，修改成功。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linux系统如何查看版本信息&#34;&gt;Linux系统如何查看版本信息&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;打印系统信息, 包括: -s 内核名称, -r 内核版本, -n 网络节点名称(hostname), -o 操作系统(eq: GNU/Linux), -p 处理器结构
uname -a
显示内核版本:                         cat /proc/version
显示发行版本信息:                   cat /etc/issue
                                    lsb_release -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu搜索已安装软件&#34;&gt;ubuntu搜索已安装软件&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;dpkg -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看当前目录大小&#34;&gt;查看当前目录大小&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;du -sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssl问题&#34;&gt;ssl问题&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ubuntu@tegra-ubuntu:~/robot/develop/ros_third/src$ wget https://github.com/imxood/StudyNote/raw/master/git%E7%AC%94%E8%AE%B0.txt
--2017-09-22 16:27:38--  https://github.com/imxood/StudyNote/raw/master/git%E7%AC%94%E8%AE%B0.txt
Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113
Connecting to github.com (github.com)|192.30.255.112|:443... connected.
ERROR: cannot verify github.com&#39;s certificate, issued by ‘CN=DigiCert SHA2 Extended Validation Server CA,OU=www.digicert.com,O=DigiCert Inc,C=US’:
Unable to locally verify the issuer&#39;s authority.
To connect to github.com insecurely, use `--no-check-certificate&#39;.

wget https://www.digicert.com/CACerts/DigiCertHighAssuranceEVCA-1.crt --no-check-certificate
sudo cp DigiCertHighAssuranceEVCA-1.crt /usr/local/share/ca-certificates/
sudo update-ca-certificates
solved!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用户管理&#34;&gt;用户管理:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;先给个例子:
sudo useradd -m  -s /bin/bash maxu 添加用户maxu, 设置home目录, home模板来自/etc/skel, -s 指定bash, 若不指定, 则默认是/bin/sh, 没有tab自动补全及当前路径
sudo userdel maxu, 删除用户, 不删除用户目录, 若加上-r会把用户目录一起删掉

useradd 注：添加用户
passwd 注：为用户设置密码
usermod 注：修改用户命令，可以通过usermod 来修改登录名、用户的家目录等等；
id 注：查看用户的UID、GID及所归属的用户组
groupadd 注：添加用户组；
groupdel 注：删除用户组；
groupmod 注：修改用户组信息
groups 注：显示用户所属的用户组

usermod -a -G sudo,adm,dialout peak 给peak zhui加sudo,adm,dialout组
&amp;lt;!-- peak adm dialout cdrom sudo dip plugdev netdev lpadmin --&amp;gt;

cat /etc/passwd 查看Linux下所有用户
    root:x:0:0:root:/root:/bin/bash
    maxu:x:1001:0::/home/maxu:/bin/bash
    ...
    username:password:uid:gid:allname:homedir:shell

    uid是0，就表示是超级管理员

cat /etc/shadow 查看用户的密码加密内容

cat /etc/group 查看用户的组信息:
    root:x:0:
    daemon:x:1:
    bin:x:2:
    sys:x:3:
    adm:x:4:syslog,peak
    ...
    groupname:password:gid:members
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fatal-error-boost-shared-ptr-hpp-没有那个文件或目录&#34;&gt;fatal error: boost/shared_ptr.hpp: 没有那个文件或目录:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install --no-install-recommends libboost-all-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;dpkg --print-architecture， 显示系统架构
dpkg --print-foreign-architectures， 显示其它系统架构

dpkg --print-foreign-architectures | awk &#39;{print $1}&#39;, 显示第一列

sudo apt-get remove --purge `dpkg --get-selections | grep arm64 | awk &#39;{print $1}&#39;`
sudo dpkg --remove-architecture arm64

如果移除架构不成功:
sudo apt-get remove .*:arm64
sudo dpkg --remove-architecture arm64

## 移除i386
dpkg -l | grep i386 | awk &#39;{print $2}&#39; | xargs sudo apt-get purge -y
sudo dpkg --remove-architecture i386
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查询相关&#34;&gt;查询相关&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;readlink -f .,获取路径
dirname .,获取目录名
basename .,获取文件名

pkg-config --modversion opencv 查看opencv是否安装

sudo fdisk -l /dev/mmcblk1p1 查看设备信息
df -lh  查看当前挂在的文件系统
cat /proc/mounts 查看已挂在的文件系统详情
lsblk 查看块设备信息
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;挂载&#34;&gt;挂载&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;fuser -km /media/peak/3930-38331 查看并杀死正在使用的指定挂载文件系统
umount /media/peak/3930-38331 卸载文件系统
mount -t vfat /dev/mmcblk1p1 ~/sdisk
sudo mount -o remount,rw,dir_mode=0777,file_mode=0777 /dev/mmcblk1p1 ~/sdisk 重新挂载
mount -t vfat -o uid=1002,gid=1002 /dev/mmcblk1p1 ~/sdisk
sudo vim /etc/fstab

UUID=024C92894C92775F   /win/d   ntfs-3g   locale=zh_CN.UTF-8,uid=peak,gid=peak   0   0

对于挂载不同格式的磁盘，要注意options是不同的，比如说：ext4没有uid,gid,umask=0002

options: 有权限前提下: rw,可读写, exec,可执行

查看挂在的磁盘UUID:
ls -all /dev/disk/by-uuid

result=$(df -l | grep /dev/mmcblk1p1)
if test -n &amp;quot;$result&amp;quot;; then
    result=$(echo &amp;quot;$result&amp;quot; | awk &#39;{print $6}&#39;)
    fuser -km $result
    umount $result
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;umask&#34;&gt;umask&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;处理默认权限，shell中执行umask命令,查看当前用户的umask:0002
创建目录时, 目录的默认权限是:7-0,7-0,7-2 即775
创建文件时，默认不具有执行权限，则默认权限是:6-0,6-0,6-2 即664
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看usb设备的具体信息&#34;&gt;查看usb设备的具体信息&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;udevadm info --attribute-walk --path=/sys/bus/usb-serial/devices/ttyUSB0
sudo vim /etc/udev/rules.d/myusb.rules 编写设备规则
rule:
    MODE:=&amp;quot;0666&amp;quot; 设置每个人都有读写权限
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linux中的常见脚本&#34;&gt;linux中的常见脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/etc/fstab
/etc/init.d/rcS
/etc/rc.d/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ping的原理是什么&#34;&gt;ping的原理是什么&lt;/h3&gt;

&lt;h3 id=&#34;show-the-status-of-modules-in-the-linux-kernel&#34;&gt;Show the status of modules in the Linux Kernel&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;lsmod
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看已安装的驱动&#34;&gt;查看已安装的驱动&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cat /lib/modules/$(uname -r)/modules.builtin
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wget&#34;&gt;wget&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-P  下载到指定目录
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;添加自启动服务&#34;&gt;添加自启动服务&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod 755 new_service.sh
sudo update-rc.d new_service.sh defaults 90
sudo update-rc.d -f new_service.sh remove

sudo systemctl daemon-reload
systemctl status RobotBringup.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看网络端口占用的两种方法-第二种最为详细-相关的打开都会显示&#34;&gt;查看网络端口占用的两种方法, 第二种最为详细,相关的打开都会显示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ss -nl | grep 10086
lsof -i:10086,  list open files
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;设置gnome应用的自动启动属性-desktop文件位于-autostart目录中&#34;&gt;设置gnome应用的自动启动属性, .desktop文件位于~/.autostart目录中&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;X-GNOME-Autostart-enabled=true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu17-设置关闭-最大化-最小化按钮&#34;&gt;ubuntu17 设置关闭,最大化,最小化按钮&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;左边:
gsettings set org.gnome.desktop.wm.preferences button-layout &#39;close,maximize,minimize:&#39;
右边：
gsettings set org.gnome.desktop.wm.preferences button-layout &#39;:close,maximize,minimize&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;时间命令&#34;&gt;时间命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;date +%Y-%m-%d.%H:%M:%S
输出:2018-02-17.23:35:45
设置时间:
date -s &amp;quot;2018-04-17 8:00:00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看声卡设备&#34;&gt;查看声卡设备&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;aplay -l    list all soundcards and digital audio devices
aplay -L    list device names
cat /proc/asound/cards
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看可执行程序的链接信息&#34;&gt;查看可执行程序的链接信息&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;readelf -a programName

-d, 可显示目标程序的动态库
readelf -d audio_proc_test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看所有的总线设备&#34;&gt;查看所有的总线设备&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;lspci
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;显示系统的版本信息-s-short-简写-只显示值&#34;&gt;显示系统的版本信息, -s, short 简写, 只显示值&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;lsb_release -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;显示所有的块设备&#34;&gt;显示所有的块设备&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;updates-and-queries-runlevel-information-for-system-services-更新或请求系统服务的运行级别的信息&#34;&gt;updates and queries runlevel information for system services 更新或请求系统服务的运行级别的信息&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;chkconfig --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;让httpd-在机器启动的时候在运行级别上启动&#34;&gt;让httpd 在机器启动的时候在运行级别上启动&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;chkconfig --level 345 httpd on
&lt;/code&gt;&lt;/pre&gt;

&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTc2NDcwMTI1NV19
--&gt;

&lt;h3 id=&#34;apt设置代理&#34;&gt;apt设置代理&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/apt/apt.conf
添加(带有分号):
    Acquire::http::proxy &amp;quot;http://127.0.0.1:8123&amp;quot;;
    Acquire::https::proxy &amp;quot;https://127.0.0.1:8123&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fdisk&#34;&gt;fdisk&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;p、打印分区表。
n、新建一个新分区。
d、删除一个分区。
q、退出不保存。
w、把分区写进分区表，保存并退出。

U盘分三个区，1，cento live 2，
sudo mkfs.ext4 /dev/sdc1
sudo dd if=CentOS-7-x86_64-LiveGNOME-1708.iso of=/dev/sdc1 bs=16M

# update part
sudo partprobe /dev/sdc

1  umount /dev/sdc1
2  umount /dev/sdc2
3  mount   /dev/sdc1  /tmp/boot
4  mkdir /tmp/boot
5  mount   /dev/sdc1  /tmp/boot
6  grub-install --root-directory=/tmp/boot --no-floppy /dev/sdc
7  ll /tmp/boot/
8  grub-install --root-directory=/tmp/boot --no-floppy /dev/sdc
9  umount /dev/sdc1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10  lsblk
   11  ls
   12  fdisk /dev/sdc
   13  partprobe
   14  mkfs.vfat -F 32 -n MULTIBOOT /dev/sdc1
   15  umount /dev/sdc1
   16  mkfs.vfat -F 32 -n MULTIBOOT /dev/sdc1
   17  ll /media/
   18  lsblk
   19  grub-install &amp;ndash;force &amp;ndash;no-floppy &amp;ndash;root-directory=/media/mx/MULTIBOOT /dev/sdc1
   20  cd /media/mx/MULTIBOOT/
   21  ls
   22  cd boot/grub/
   23  wget &lt;a href=&#34;http://pendrivelinux.com/downloads/multibootlinux/grub.cfg&#34;&gt;http://pendrivelinux.com/downloads/multibootlinux/grub.cfg&lt;/a&gt;
   24  ls
   25  cat grub.cfg
   26  history&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mbr转gpt之前先执行下面,否则: grub-install: warning: Attempting to install GRUB to a disk with multiple partition labels.  This is not supported yet..

fdisk 创建的分区是从2048开始，所以，如果使用fdisk创建bootable分区的话，还需要删除1-2047个block的内容:
sudo dd if=/dev/zero of=/dev/sdc seek=1 count=2047

# mbr转gpt
sudo parted /dev/sdc
mklabel gpt
# 显示分区情况
print
q

U盘引导分区制作,U盘多系统

参考: https://wiki.archlinux.org/index.php/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)

我的U盘是32G的

使用parted命令把U盘mbr格式转换成gpt格式,使用gdisk对gpt格式操作

1, 创建分区

sudo gdisk /dev/sdc

1) BIOS boot分区，类型：ef02(bios_grub), 1MB空间

    Command (? for help)：n

    Partition number (1-128, default 1): Enter

    First sector：Enter

    Last sector: +1M

    Hex code or GUID: L

    &amp;lt;!-- 找到BIOS boot partition(ef02) --&amp;gt;
    Hex code or GUID: ef02

    Command (? for help)：p

    Number  Start (sector)    End (sector)  Size       Code  Name
    2048            4095   1024.0 KiB  EF02  BIOS boot partition

2) 创建ESP分区(即EFI System Partition, EFI系统分区), +512M

    Command (? for help)：n

    Partition number (2-128, default 2): Enter

    First sector：Enter

    Last sector: +8G

    Hex code or GUID: Enter

3) 创建一个适合大小合适格式的分区,fat32,ext4都可以,就是一个数据分区了,放系统镜像,或者是个人数据:

    Command (? for help)：n

    Partition number (3-128, default 3): Enter

    First sector：Enter

    Last sector: +8G

    Hex code or GUID: Enter

这时:

    Command (? for help)：p

    Number  Start (sector)    End (sector)  Size       Code  Name
    1            2048            4095   1024.0 KiB  EF02  BIOS boot partition
    2            4096         1052671   512.0 MiB   8300  Linux filesystem
    3         1052672        17829887   8.0 GiB     8300  Linux filesystem


    &amp;lt;!-- 保存,退出 --&amp;gt;
    w
    q

    &amp;lt;!-- 通知系统更新分区表信息 --&amp;gt;
    sudo partprobe

    &amp;lt;!-- 格式化文件系统: --&amp;gt;

    sudo mkfs.vfat /dev/sdc2

    &amp;lt;!-- /dev/sdc3: fat32,ext4都可以 --&amp;gt;
    sudo mkfs.vfat /dev/sdc3

2, 使用grub-install命令,生成开机引导程序至指定分区(/dev/sdc2)

    # grub相关程序
    sudo apt install -y grub-pc grub-efi-amd64

    &amp;lt;!-- 前面两步创建的是两个分区: /dev/sdc1, /dev/sdc2, 可以执行命令查看:lsblk /dev/sdc --&amp;gt;
    &amp;lt;!-- 指定权限是便于操作,无需sudo等操作 --&amp;gt;
    sudo mount -o uid=$USER,gid=$USER /dev/sdc2 /boot
    &amp;lt;!-- sudo mount -o uid=$USER,gid=$USER /dev/sdc3 /mnt --&amp;gt;

    sudo grub-install --target=i386-pc --boot-directory=/mnt/dev/boot --efi-directory=/mnt/dev/boot --bootloader-id=grub /dev/sdc

    &amp;quot;No suitable mode found&amp;quot; error:
    sudo cp /usr/share/grub/unicode.pf2 /boot/grub


sudo mount -o uid=$USER,gid=$USER /dev/sdc2 /mnt/dev
sudo grub-install --target=i386-pc --boot-directory=/mnt/dev/boot --efi-directory=/mnt/dev/boot --bootloader-id=grub /dev/sdc

cp /usr/share/grub/{unicode.pf2,ascii.pf2} /mnt/dev/boot/grub

&amp;lt;!-- sudo grub-install --target=i386-pc --no-floppy --boot-directory=/mnt/dev/boot /dev/sdc --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mbr转gpt&#34;&gt;mbr转gpt&lt;/h1&gt;

&lt;p&gt;sudo parted /dev/sdc&amp;mdash;&amp;ndash;&amp;gt;mklabel gpt&lt;/p&gt;

&lt;p&gt;linux查看设备命令&lt;/p&gt;

&lt;p&gt;系统&lt;/p&gt;

&lt;h1 id=&#34;uname-a-查看内核-操作系统-cpu信息&#34;&gt;uname -a               # 查看内核/操作系统/CPU信息&lt;/h1&gt;

&lt;p&gt;# head -n 1 /etc/issue   # 查看操作系统版本&lt;/p&gt;

&lt;h1 id=&#34;cat-proc-cpuinfo-查看cpu信息&#34;&gt;cat /proc/cpuinfo      # 查看CPU信息&lt;/h1&gt;

&lt;p&gt;# hostname               # 查看计算机名&lt;/p&gt;

&lt;h1 id=&#34;lspci-tv-列出所有pci设备&#34;&gt;lspci -tv              # 列出所有PCI设备&lt;/h1&gt;

&lt;p&gt;# lsusb -tv              # 列出所有USB设备&lt;/p&gt;

&lt;h1 id=&#34;lsmod-列出加载的内核模块&#34;&gt;lsmod                  # 列出加载的内核模块&lt;/h1&gt;

&lt;p&gt;# env                    # 查看环境变量
cat /proc/asound/cards 查看声卡设备
资源&lt;/p&gt;

&lt;h1 id=&#34;free-m-查看内存使用量和交换区使用量&#34;&gt;free -m                # 查看内存使用量和交换区使用量&lt;/h1&gt;

&lt;h1 id=&#34;df-h-查看各分区使用情况&#34;&gt;df -h                  # 查看各分区使用情况&lt;/h1&gt;

&lt;h1 id=&#34;du-sh-目录名-查看指定目录的大小&#34;&gt;du -sh &amp;lt;目录名&amp;gt;        # 查看指定目录的大小&lt;/h1&gt;

&lt;h1 id=&#34;grep-memtotal-proc-meminfo-查看内存总量&#34;&gt;grep MemTotal /proc/meminfo   # 查看内存总量&lt;/h1&gt;

&lt;p&gt;# grep MemFree /proc/meminfo    # 查看空闲内存量&lt;/p&gt;

&lt;h1 id=&#34;uptime-查看系统运行时间-用户数-负载&#34;&gt;uptime                 # 查看系统运行时间、用户数、负载&lt;/h1&gt;

&lt;h1 id=&#34;cat-proc-loadavg-查看系统负载&#34;&gt;cat /proc/loadavg      # 查看系统负载&lt;/h1&gt;

&lt;p&gt;磁盘和分区&lt;/p&gt;

&lt;h1 id=&#34;mount-column-t-查看挂接的分区状态&#34;&gt;mount | column -t      # 查看挂接的分区状态&lt;/h1&gt;

&lt;h1 id=&#34;fdisk-l-查看所有分区&#34;&gt;fdisk -l               # 查看所有分区&lt;/h1&gt;

&lt;h1 id=&#34;swapon-s-查看所有交换分区&#34;&gt;swapon -s              # 查看所有交换分区&lt;/h1&gt;

&lt;p&gt;# hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)&lt;/p&gt;

&lt;h1 id=&#34;dmesg-grep-ide-查看启动时ide设备检测状况&#34;&gt;dmesg | grep IDE       # 查看启动时IDE设备检测状况&lt;/h1&gt;

&lt;p&gt;网络&lt;/p&gt;

&lt;h1 id=&#34;ifconfig-查看所有网络接口的属性&#34;&gt;ifconfig               # 查看所有网络接口的属性&lt;/h1&gt;

&lt;p&gt;# iptables -L            # 查看防火墙设置&lt;/p&gt;

&lt;h1 id=&#34;route-n-查看路由表&#34;&gt;route -n               # 查看路由表&lt;/h1&gt;

&lt;h1 id=&#34;netstat-lntp-查看所有监听端口&#34;&gt;netstat -lntp          # 查看所有监听端口&lt;/h1&gt;

&lt;h1 id=&#34;netstat-antp-查看所有已经建立的连接&#34;&gt;netstat -antp          # 查看所有已经建立的连接&lt;/h1&gt;

&lt;p&gt;# netstat -s             # 查看网络统计信息
进程&lt;/p&gt;

&lt;h1 id=&#34;ps-ef-查看所有进程&#34;&gt;ps -ef                 # 查看所有进程&lt;/h1&gt;

&lt;h1 id=&#34;top-实时显示进程状态&#34;&gt;top                    # 实时显示进程状态&lt;/h1&gt;

&lt;p&gt;用户&lt;/p&gt;

&lt;h1 id=&#34;w-查看活动用户&#34;&gt;w                      # 查看活动用户&lt;/h1&gt;

&lt;h1 id=&#34;id-用户名-查看指定用户信息&#34;&gt;id &amp;lt;用户名&amp;gt;            # 查看指定用户信息&lt;/h1&gt;

&lt;h1 id=&#34;last-查看用户登录日志&#34;&gt;last                   # 查看用户登录日志&lt;/h1&gt;

&lt;h1 id=&#34;cut-d-f1-etc-passwd-查看系统所有用户&#34;&gt;cut -d: -f1 /etc/passwd   # 查看系统所有用户&lt;/h1&gt;

&lt;h1 id=&#34;cut-d-f1-etc-group-查看系统所有组&#34;&gt;cut -d: -f1 /etc/group    # 查看系统所有组&lt;/h1&gt;

&lt;h1 id=&#34;crontab-l-查看当前用户的计划任务&#34;&gt;crontab -l             # 查看当前用户的计划任务&lt;/h1&gt;

&lt;p&gt;服务&lt;/p&gt;

&lt;h1 id=&#34;chkconfig-list-列出所有系统服务&#34;&gt;chkconfig &amp;ndash;list       # 列出所有系统服务&lt;/h1&gt;

&lt;h1 id=&#34;chkconfig-list-grep-on-列出所有启动的系统服务&#34;&gt;chkconfig &amp;ndash;list | grep on    # 列出所有启动的系统服务&lt;/h1&gt;

&lt;p&gt;程序&lt;/p&gt;

&lt;h1 id=&#34;rpm-qa-查看所有安装的软件包&#34;&gt;rpm -qa                # 查看所有安装的软件包&lt;/h1&gt;

&lt;p&gt;常用命令整理如下：
查看主板的序列号: dmidecode | grep -i ’serial number’&lt;/p&gt;

&lt;p&gt;用硬件检测程序kuduz探测新硬件：service kudzu start ( or restart)&lt;/p&gt;

&lt;p&gt;查看CPU信息：cat /proc/cpuinfo [dmesg | grep -i &amp;lsquo;cpu&amp;rsquo;][dmidecode -t processor]&lt;/p&gt;

&lt;p&gt;查看内存信息：cat /proc/meminfo [free -m][vmstat]&lt;/p&gt;

&lt;p&gt;查看板卡信息：cat /proc/pci&lt;/p&gt;

&lt;p&gt;查看显卡/声卡信息：lspci |grep -i ‘VGA’[dmesg | grep -i &amp;lsquo;VGA&amp;rsquo;]&lt;/p&gt;

&lt;p&gt;查看网卡信息：dmesg | grep -i ‘eth’[cat /etc/sysconfig/hwconf | grep -i eth][lspci | grep -i &amp;lsquo;eth&amp;rsquo;]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux工具使用</title>
      <link>http://imxood.github.io/post/linux%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/linux%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>linux必装软件： sudo apt install curl vim-gnome git cmake nethogs \ unity-tweak-tool python-pip shadowsocks polipo sudo -H pip2 install --upgrade pip  配置中文环境 locale 查看当前环境 locale -a 查看可使用的环境列表 sudo apt install language-pack-zh-hans 安装中文语言包 sudo bash -c &#39;echo &amp;quot;LC_ALL=zh_CN.UTF-8&amp;quot; &amp;gt;&amp;gt; /etc/default/locale&#39; sudo apt install curl  c++ environment sudo apt install build-essential cmake  安装docker curl -sSL https://get.daocloud.io/docker | sh 写在docker: sudo apt remove docker docker-engine 安装 Docker Compose: sudo curl -L https://get.</description>
    </item>
    
    <item>
      <title>linux开发</title>
      <link>http://imxood.github.io/post/linux%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/linux%E5%BC%80%E5%8F%91/</guid>
      <description>获取文件的flags，即open函数的第二个参数:
flags = fcntl(fd,F_GETFL,0); fcntl(fd,F_SETFL,flags);
 增加文件的某个flags，比如文件是阻塞的，想设置成非阻塞:
flags = fcntl(fd,F_GETFL,0);
flags |= O_NONBLOCK;
fcntl(fd,F_SETFL,flags);
 取消文件的某个flags，比如文件是非阻塞的，想设置成为阻塞:
flags = fcntl(fd,F_GETFL,0);
flags &amp;amp;= ~O_NONBLOCK;
fcntl(fd,F_SETFL,flags);
加锁， struct flock file_lock; file_lock.l_type = F_WRLCK; file_lock.l_whence = SEEK_SET; file_lock.l_start = 0; file_lock.l_len = 0; file_lock.l_pid = getpid(); fcntl(fd, F_SETLK, &amp;amp;file_lock)
fd = open(&amp;ldquo;/dev/buttons&amp;rdquo;, O_RDWR );
fcntl(fd, F_SETFL, 0);
n_write = write(fd, &amp;amp;key_val, 1); n_read = read(fd, &amp;amp;key_val, 1);
termios.c_cc[VMIN]=10; termios.c_cc[VTIME]=10;//1s 这两行代码指的是:在10个字符或10个十分之一秒的条件下，若满足其中一个,则read返回， 某一个为0则不考虑那一个条件
tcsetattr(fd, TCSAFLUSH, &amp;amp;options);//刷新设置</description>
    </item>
    
    <item>
      <title>log配置</title>
      <link>http://imxood.github.io/post/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</guid>
      <description>// -X号: X信息输出时左对齐； // %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL, // %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 // %r: 输出自应用启动到输出该log信息耗费的毫秒数 // %c: 输出日志信息所属的类目，通常就是所在类的全名 // %t: 输出产生该日志事件的线程名 // %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10) // %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。 // %%: 输出一个&amp;rdquo;%&amp;ldquo;字符 // %F: 输出日志消息产生时所在的文件名称 // %L: 输出代码中的行号 // %m: 输出代码中指定的消息,产生的日志具体信息 // %n: 输出一个回车换行符，Windows平台为&amp;rdquo;/r/n&amp;rdquo;，Unix平台为&amp;rdquo;/n&amp;rdquo;输出日志信息换行
// 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如： // 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。 // 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，&amp;rdquo;-&amp;ldquo;号指定左对齐。 // 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。 // 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。 // 举个栗子 log4j.appender.Errorlog.layout.ConversionPattern= %5p %d{yyyy-MM-dd HH:mm:ss} %c %m %n log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</description>
    </item>
    
    <item>
      <title>maven基本使用</title>
      <link>http://imxood.github.io/post/maven/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/maven/</guid>
      <description>mvn clean install -e -U -e详细异常，-U强制更新 for /r %i in (*.lastUpdated)do del %i 删掉扩展为.lastupdate的文件，这些文件都是maven在下载过程中下载失败了且在本地存在的jar文件，但是其存在影响你下载这些jar文件的时候，造成无法去中央仓库下载的干扰。 mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar 手动添加本地jar 导出Project依赖的jar包 mvn dependency:copy-dependencies -DoutputDirectory=lib  </description>
    </item>
    
    <item>
      <title>mysql笔记</title>
      <link>http://imxood.github.io/post/mysql/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/mysql/</guid>
      <description>级联删除和更新 CREATE TABLE `roottb` ( `id` INT(11) UNSIGNED AUTO_INCREMENT NOT NULL, `data` VARCHAR(100) NOT NULL DEFAULT &#39;&#39;, PRIMARY KEY (`id`) ) TYPE=InnoDB; CREATE TABLE `subtb` ( `id` INT(11) UNSIGNED AUTO_INCREMENT NOT NULL, `rootid` INT(11) UNSIGNED NOT NULL DEFAULT &#39;0&#39;, `data` VARCHAR(100) NOT NULL DEFAULT &#39;&#39;, PRIMARY KEY (`id`), INDEX (`rootid`), FOREIGN KEY (`rootid`) REFERENCES roottb(`id`) ON DELETE CASCADE ) TYPE=InnoDB; 注意： 1、必须使用InnoDB引擎； 2、外键必须建立索引（INDEX）； 3、外键绑定关系这里使用了“ ON DELETE CASCADE”，意思是如果外键对应数据被删除，将关联数据完全删除 --------------------------------------------------------------------------------------------------------------- user表： create table user ( userid integer not null auto_increment primary key, username varchar(12) not null ) type=innodb; password表： create table password ( userid integer not null, password varchar(12) not null, index (userid), foreign key (userid) references user (userid) on delete cascade on update cascade ) type=innodb; 1、MySQL支持外键约束，并提供与其它DB相同的功能，但表类型必须为 InnoDB 2、建外键的表的那个列要加上index.</description>
    </item>
    
    <item>
      <title>opencv笔记</title>
      <link>http://imxood.github.io/post/opencv/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/opencv/</guid>
      <description> void Learn_Mat_Definiton() //测试一下step[]的各个维度大小 { //////////////////Demo1(3维矩阵)/////////////////////////////////////////// printf(&amp;quot;//////////////////////Demo1(3维矩阵)////////////////////////\n&amp;quot;); //最后面的两个数：(行，列),确定了一个面 //是一个依次降维的过程 //8,10组成了面，5个面，组成了立方体 int matSize[] = {5, 8, 10}; //每一维元素的个数：8：行，10：列 Mat mat1(3, matSize, CV_16UC3, Scalar::all(0)); //求step[i]的大小:每一维元素的大小(单位字节) printf(&amp;quot;\n///////step[i]的大小//////////\n&amp;quot;); printf(&amp;quot;step[0]:%d\n&amp;quot;, mat1.step[0]); //480：面的大小(第一维) printf(&amp;quot;step[1]:%d\n&amp;quot;, mat1.step[1]); //60：线的大小(第二维) printf(&amp;quot;step[2]:%d\n&amp;quot;, mat1.step[2]); //6：点的大小(第三维) //求size[i]：每一维元素的个数 printf(&amp;quot;\n///////size[i]的大小///////\n&amp;quot;); printf(&amp;quot;size[0]:%d\n&amp;quot;, mat1.size[0]); //5：面 printf(&amp;quot;size[1]:%d\n&amp;quot;, mat1.size[1]); //8：线 printf(&amp;quot;size[2]:%d\n&amp;quot;, mat1.size[2]); //10：点 //求step1(i)：每一维元素的通道数 printf(&amp;quot;\n///////step1(i)的大小///////\n&amp;quot;); printf(&amp;quot;step1(0):%d\n&amp;quot;, mat1.step1(0)); //240:面 printf(&amp;quot;step1(1):%d\n&amp;quot;, mat1.step1(1)); //30:线 printf(&amp;quot;step1(2):%d\n&amp;quot;, mat1.step1(2)); //3:点 //求elemSize：每个元素的大小(单位字节) printf(&amp;quot;\n///////elemSize的大小///////\n&amp;quot;); printf(&amp;quot;elemSize:%d\n&amp;quot;, mat1.elemSize()); //6：每个元素的大小 //求elemSize1：每个通道的大小(单位字节) printf(&amp;quot;\n///////elemSize1的大小///////\n&amp;quot;); printf(&amp;quot;elemSize1:%d\n&amp;quot;, mat1.elemSize1()); //2：每个通道的大小 }  </description>
    </item>
    
    <item>
      <title>platformio</title>
      <link>http://imxood.github.io/post/platformio/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/platformio/</guid>
      <description> account Manage PIO Account boards Embedded Board Explorer ci Continuous Integration debug PIO Unified Debugger device Monitor device or list existing home PIO Home init Initialize PlatformIO project or update existing lib Library Manager platform Platform Manager remote PIO Remote run Process project environments settings Manage PlatformIO settings test Local Unit Testing update Update installed platforms, packages and libraries upgrade Upgrade PlatformIO to the latest version 搜索stm32f767板: pio boards stm32f767 pio platform search stm32 创键 pio init --ide vscode --board genericSTM32F103RC -O framework=stm32cube nucleo_f767zi Useful commands: `platformio run` - process/build project from the current directory `platformio run --target upload` or `platformio run -t upload` - upload firmware to embedded board `platformio run --target clean` - clean project (remove compiled files) `platformio run --help` - additional information $ pio init --help Usage: pio init [OPTIONS] Options: -d, --project-dir DIRECTORY -b, --board ID --ide [atom|clion|codeblocks|eclipse|emacs|netbeans|qtcreator|sublimetext|vim|visualstudio|vscode] -O, --project-option TEXT --env-prefix TEXT -s, --silent -h, --help  </description>
    </item>
    
    <item>
      <title>python笔记</title>
      <link>http://imxood.github.io/post/python/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/python/</guid>
      <description>python默认使用ascii编码,处理文件时可能报错: os.environ 环境变量 os.getenv(&amp;quot;PATH&amp;quot;, &amp;quot;&amp;quot;) 获取环境变量 os.environ[&#39;PATH&#39;] from shutil import copyfile from os import getcwd, makedirs from os.path import abspath, basename, expanduser, isdir, isfile, join, relpath expanduser(&#39;~&#39;) os.path.join(&#39;a/b&#39;, &#39;c&#39;) 拼凑路径: a/b/c os.path.dirname(&#39;a/b/c&#39;) 获取目录名称: a/b os.path.abspath(&#39;a/b/c&#39;) 获取绝对路径: 以当前路径与a/b/c拼凑 os.path.relpath(path，start) 获取相对start的路径 os.stat(&#39;/tmp&#39;) 查看文件权限，掩码，用户组,时间等信息 os.symlink 创键链接文件 os.getpid 获取进程id platform.architecture() (&#39;64bit&#39;, &#39;&#39;) sys.platform 获取系统名称:linux sys.path sys.stderr.write subprocess.Popen socket.gethostname  修改pip源,设置清华源 linux下，修改 ~/.pip/pip.conf (没有就创建一个)， 修改 index-url至tuna，内容如下: [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下: [global] index-url = https://pypi.</description>
    </item>
    
    <item>
      <title>ros</title>
      <link>http://imxood.github.io/post/ros/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/ros/</guid>
      <description>em &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;Interpreter&amp;rsquo; solved: pip uninstall em pip install empy
nodelet用法: nodelet manager - Launch a nodelet manager node. 启动一个manager nodelet load pkg/Type manager - Launch a nodelet of type pkg/Type on manager manager. 向manager中加载nodelet nodelet standalone pkg/Type - Launch a nodelet of type pkg/Type in a standalone node. nodelet unload name manager - Unload a nodelet a nodelet by name from manager. 从manager中移除nodelet 开启一个名字为nodelet_manager的manager节点: rosrun nodelet nodelet manager __name:=nodelet_manager 向创建的nodelet_manager中加载pkg/Type为nodelet_tutorial_math/Plus的nodelet节点，并将其重命名为nodelet1，nodelet1/in话题重映射为foo，value值设为1.</description>
    </item>
    
    <item>
      <title>shell</title>
      <link>http://imxood.github.io/post/shell/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/shell/</guid>
      <description>echo $file|cut -d&amp;rsquo;.&amp;rsquo; -f1 获取文件名(不含后缀)
sed [-nefr] [动作] 选项与参数： -n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。 -e ：直接在命令列模式上进行 sed 的动作编辑； -f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作； -r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法) -i ：直接修改读取的文件内容，而不是输出到终端。 动作说明： [n1[,n2]]function n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』 function： a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～ s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！  sed example 删除第2行 cat robot.</description>
    </item>
    
    <item>
      <title>slam</title>
      <link>http://imxood.github.io/post/slam/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/slam/</guid>
      <description>1, 编译csm: sudo apt install build-essential cmake libgs-dev libcairo2-dev git clone https://github.com/AndreaCensi/csm.git mkdir csm/out -p cd csm/out cmake .. &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
2, odom_ws
sudo apt install libeigen3-dev
概率机器人学习 1. X, Z, U 三个表征: 1. 状态(会对未来产生影响的机器人及所有方面的因素, 比如: 附近人的行踪, 墙的位置, 机器人的速度、位姿) 2. 测量(利用传感器获取环境状态的信息的过程, 比如摄像头采集到的照片信息, 激光测到的距离信息) 3. 控制(携带状态改变的信息, 比如机器人控制的速度信息)
疑问(1): 这里的&amp;rdquo;控制&amp;rdquo;怎么解释呢, 书中说里程计也是控制数据?我理解到的里程计信息是这样的: 在指定频率下, 一次间隔后, 编码值的变化, 引起机器人的位姿变化(差速控制原理), 再更新最新的位姿, 并发布最新的位姿到tf和里程计中 这里的里程计信息很明显是状态统计吧, 由速度控制产生的结果被轮子驱动读取到并发布出去
疑问(2): X, Z, U, 时序是怎样的? 根据书中图片: ![](./images/BayesNetwork.jpg) 我的理解: 先抛开概率论, 我们想象一下过程, 初始环境: X0, Z0, U0, 在下一个时刻(时刻1)时, 有了一个控制U1(比如说速度指令), 此时, X和Z并没有立即改变(改变需要时间), 此时根据控制U1和前一时刻的测量Z0, 就能预测U1产生的结果X1(X1即为控制U1和测量Z1的充分统计量)(状态转移概率), 根据X0、Z0, U1同样也能预测Z1(测量概率) 根据这里的想象， 再根据条件独立， 那么也可以解释： p(Xt | X0:t-1, Z1:t-1, U1:t)中的Z和U为什么从1开始  卡尔曼滤波 概念理解 如何正确估计一棵果树的高度？</description>
    </item>
    
    <item>
      <title>ubuntu 安装 mssql server</title>
      <link>http://imxood.github.io/post/mssqlserver/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/mssqlserver/</guid>
      <description>curl https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2017.list | sudo tee /etc/apt/sources.list.d/mssql-server.list
sudo apt-get update sudo apt-get install -y mssql-server</description>
    </item>
    
    <item>
      <title>vps server ubuntu配置</title>
      <link>http://imxood.github.io/post/vps_server/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/vps_server/</guid>
      <description>安装常用软件 sudo apt install -y vim python2.7 python-pip git sudo -H pip2 install --upgrade pip  添加用户, 分配权限 sudo useradd -m imxood sudo usermod -a -G sudo,adm,ssh imxood  为新用户设置密码 sudo passwd imxood  使用新用户操作 sudo su imxood  创建develop文件夹 mkdir ~/develop -p ~/develop  安装进程管理工具 sudo apt install -y supervisor 配置文件是: /etc/supervisor/supervisord.conf  安装shadowsocks server sudo -H pip2 install shadowsocks &amp;amp;&amp;amp; sudo mkdir -p /etc/shadowsocks &amp;amp;&amp;amp; sudo vim /etc/shadowsocks/config.</description>
    </item>
    
    <item>
      <title>vscode</title>
      <link>http://imxood.github.io/post/vscode/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/vscode/</guid>
      <description>vscode插件的开发命令 sudo npm install -g yo generator-code yo code f5 sudo npm install -g vsce vsce package code --install-extension ***.vsix  在launch.json中使用外部的环境变量 ${env:USER}</description>
    </item>
    
    <item>
      <title>web</title>
      <link>http://imxood.github.io/post/web/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/web/</guid>
      <description>前端环境 sudo apt-get remove nodejs --purge curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apte-get update sudo apt-get install -y nodejs node -v npm -v sudo apt install -y nodejs npm sudo ln -s /usr/bin/nodejs /usr/bin/node sudo npm install -g cnpm --registry=https://registry.npm.taobao.org # 升级npm sudo npm install -g n sudo n stable sudo npm install -g yarn yarn config set registry &#39;https://registry.npm.taobao.org&#39; # 前端的一个构建工具 sudo yarn global add grunt-cli ISSUE: You need to have Ruby and Sass installed and in your PATH for this task to work.</description>
    </item>
    
    <item>
      <title>windows</title>
      <link>http://imxood.github.io/post/windows/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/windows/</guid>
      <description>根据网络端口查看当前进程 netstat -ano | findstr &amp;quot;8080&amp;quot;  windows 10 挂载esp分区到Z盘(U盘似乎不能挂载) # diskpart # list disk # sel disk 0 # list vol # select vol 0 # assign letter=z  添加右键菜单 注册表脚本 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell] [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\bash] [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\bash\command] @=&amp;quot;D:\\programs\\MinGW\\msys\\1.0\\bin\\bash.exe \&amp;quot;%V\&amp;quot;&amp;quot;  删除右键菜单 注册表脚本 [Version] Signature=&amp;quot;$Windows NT$&amp;quot; [DefaultInstall] DELREG=Edit with Custom Menu [Edit with SciTE] hkcr,&amp;quot;*\\shell\\Edit with SciTE&amp;quot;  工具msys2 https://blog.csdn.net/qiuzhiqian1990/article/details/56671839
解决无法禁用输入法ctrl space快捷键的问题  regedit, 打开注册表-&amp;gt;找到&amp;rdquo;计算机\HKEY_USERS.DEFAULT\Control Panel\Input Method\Hot Keys\00000010&amp;rdquo;-&amp;gt;修改key modifiers 和 vitrual key</description>
    </item>
    
    <item>
      <title>安卓教程</title>
      <link>http://imxood.github.io/post/android/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/android/</guid>
      <description>配安卓环境 安卓环境下载: http://sdk.android-studio.org/index.php android studio https://dl.google.com/dl/android/studio/ide-zips/3.0.0.18/android-studio-ide-171.4408382-linux.zip 7z x android-studio-ide-171.4408382-linux.zip -o/usr/local export STUDIO_HOME=/usr/local/android-studio export PATH=$STUDIO_HOME/bin:$PATH  sdk http://sdk.android-studio.org/ tar -zxvf android-sdk-linux.tar.gz sudo mv android-sdk-linux /usr/local export SDK_HOME=/usr/local/android-sdk-linux export PATH=$SDK_HOME/tools:$SDK_HOME/platform-tools:$PATH  gradle: https://services.gradle.org/distributions/gradle-2.14.1-all.zip unzip gradle-2.14.1-all.zip mv gradle-2.14.1-all /usr/local export GRADLE_HOME=/usr/local/gradle-2.14.1 export PATH=$GRADLE_HOME/bin:$PATH  安卓真机调试: 获取设备ID(2717:ff48): lsusb cd /etc/udev/rules.d 新建文件: sudo gedit android.rules: SUBSYSTEM==&amp;quot;usb&amp;quot;, ATTRS{idVendor}==&amp;quot;2717&amp;quot;, SYSFS{idProduct}==&amp;quot;400e&amp;quot;, MODE:=&amp;quot;0666&amp;quot; //SYSFS{idProduct}? sudo chmod a+rx android.rules 重启usb和adb服务: service udev restart adb kill-server adb start-server adb devices  adb常用命令: adb devices, 获取设备列表及设备状态 adb get-state, 获取设备的状态 adb install apkFile, 安装apk到手机 adb kill-server, adb start-server, 结束 adb 服务，启动 adb 服务 adb logcat, 打印 Android 的系统日志 adb uninstall packageName, 下载apk  安装 ionic: 常用命令: 编译时报错: Checking the license for package Android SDK Platform 26 in /usr/local/android-sdk-linux/licenses 。。。 Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.</description>
    </item>
    
    <item>
      <title>嵌入式</title>
      <link>http://imxood.github.io/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E5%B5%8C%E5%85%A5%E5%BC%8F/</guid>
      <description>嵌入式笔记 十六进制发送  &amp;ldquo;abcd&amp;rdquo;,要把这个字符串以十六进制发送出去，一个十六进制，占4个二进制位,所以ab是一个字节，cd是第二个字节，ab即:(&amp;lsquo;a&amp;rsquo;-&amp;lsquo;0&amp;rsquo;+10)*16+(&amp;lsquo;b&amp;rsquo;-&amp;lsquo;0&amp;rsquo;+10),cd即:(&amp;lsquo;c&amp;rsquo;-&amp;lsquo;0&amp;rsquo;+10)*16+(&amp;rsquo;d&amp;rsquo;-&amp;lsquo;0&amp;rsquo;+10),也就是说，以十六进制发送，就是给出内容是十六进制的字符串，转换成char类型的数组，这样的过程
 linux交叉编译环境: 大概的步骤: 下载,解压 export PATH=$PATH:/home/peak/arm/arm-linux-gcc-4.3.2/bin 如果arm-linux-gcc -v,报错: arm-linux-gnueabihf-gcc: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory 是因为Ubuntu16.04版本已不支持ia32-libs的软件包 sudo apt-get install lib32stdc++6 √ 也可以使用这种方式安装交叉环境, 不过上面的lib32stdc++6依然要安装 apt-cache search gnueabi | grep gcc sudo apt install gcc-4.7-arm-linux-gnueabi  &amp;ldquo;mkimage&amp;rdquo; command not found: sudo apt-get install u-boot-tools
regenerate rootfs cpio 11282 blocks 12032 blocks awk: line 2: function strtonum never defined awk: line 2: function strtonum never defined ERROR: build kernel Failed: sudo apt-get install gawk</description>
    </item>
    
    <item>
      <title>工具记录</title>
      <link>http://imxood.github.io/post/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/</guid>
      <description>python库: ####
给工具库做一个记录，以后有需要直接来找找看 vim 常用命令 Ctrl i 前进 Ctrl o 后退 u 撤销 Ctrl r 恢复 :%s/abc/def/g 把每一行的abc替换成def,可以使用&#39;+&#39;代替上面的&#39;/&#39; :set invlist 将不可见的字符显示出来，例如，会以^I表示一个tab符，$表示一个回车符等。 shell命令:cat -A file可以把文件中的所有可见的和不可见的字符都显示出来 gg=G vim 格式化 :%d 删除所有内容  gcp 可显示进度的拷贝工具 3d库 (http://www.ogre3d.org/) Since 2001, OGRE has grown to become one of the most popular open-source graphics rendering engines, and has been used in a large number of production projects, in such diverse areas as games, simulators, educational software, interactive art, scientific visualisation, and others.</description>
    </item>
    
    <item>
      <title>差速控制</title>
      <link>http://imxood.github.io/post/%E5%B7%AE%E9%80%9F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E5%B7%AE%E9%80%9F%E6%8E%A7%E5%88%B6/</guid>
      <description>差速控制原理 V = (Vr + Vl)/2 W = (Vr - Vl)/wheelbase
仅仅根据前后两次的轮子编码值的差, 计算轮子上一次统计到当前时刻的位移及旋转角度
Odometry: 使用从差速控制得到的位移及旋转角度, 发布里程信息</description>
    </item>
    
    <item>
      <title>库</title>
      <link>http://imxood.github.io/post/%E5%BA%93/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E5%BA%93/</guid>
      <description> gflags gflags是google开源的一套命令行参数解析工具，比getopt()函数功能要强大，使用起来更加方便，gflags还支持从环境变量和配置文件中读取参数。目前有C++和Python版本 sudo apt-get install libgflags-dev -y tutorial: http://blog.csdn.net/achelloworld/article/details/41959595  glog http://blog.csdn.net/dabenxiong666/article/details/71190102  </description>
    </item>
    
    <item>
      <title>树莓派</title>
      <link>http://imxood.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE/</guid>
      <description>树莓派编译ros项目死机</description>
    </item>
    
    <item>
      <title>版本控制</title>
      <link>http://imxood.github.io/post/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid>
      <description>.gitignore忽略规则的匹配语法 git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效
 空格不匹配任意文件，可作为分隔符，可用反斜杠转义 以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。 可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。 以斜杠&amp;rdquo;/&amp;ldquo;开头表示目录；&amp;rdquo;/&amp;ldquo;结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；&amp;rdquo;/&amp;ldquo;开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。 以星号&amp;rdquo;*&amp;ldquo;通配多个字符，即匹配多个任意字符；使用两个星号&amp;rdquo;**&amp;rdquo; 表示匹配任意中间目录，比如a/**/z可以匹配 a/z, a/b/z 或 a/b/c/z等。 以问号&amp;rdquo;?&amp;ldquo;通配单个字符，即匹配一个任意字符； 以方括号&amp;rdquo;[]&amp;ldquo;包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母. 。 以叹号&amp;rdquo;!&amp;ldquo;表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用&amp;rdquo;!&amp;ldquo;规则是不起作用的。也就是说&amp;rdquo;!&amp;ldquo;开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用&amp;rdquo;!&amp;ldquo;也不会再次被包含。可以使用反斜杠进行转义。  ##　示例
#表示此为注释,将被Git忽略 *.a 表示忽略所有 .a 结尾的文件 !lib.a 表示但lib.a除外 /TODO 表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ 表示忽略 build/目录下的所有文件，过滤整个build文件夹； doc/*.txt 表示会忽略doc/notes.txt但不包括 doc/server/arch.txt bin/: 表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件 /bin: 表示忽略根目录下的bin文件 /*.c: 表示忽略cat.c，不忽略 build/cat.c debug/*.obj: 表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj **/foo: 表示忽略/foo,a/foo,a/b/foo等 a/**/b: 表示忽略a/b, a/x/b,a/x/y/b等 !/bin/run.sh 表示不忽略bin目录下的run.sh文件 *.log: 表示忽略所有 .log 文件 config.php: 表示忽略当前路径的 config.</description>
    </item>
    
    <item>
      <title>硬件设计</title>
      <link>http://imxood.github.io/post/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/</guid>
      <description> 舵机与轴承如何配合达到最小的摩擦力?
 电线选择
  </description>
    </item>
    
    <item>
      <title>编译构建</title>
      <link>http://imxood.github.io/post/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Wed, 20 Feb 2019 19:25:43 +0800</pubDate>
      
      <guid>http://imxood.github.io/post/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/</guid>
      <description>cmake常用语法 include_directories(include) 设置头文件路径 link_directories(/usr/lib) 设置库路径 add_library(hello1 src/hello.cpp) 添加静态库 add_library(hello2 SHARED src/hello.cpp) 添加动态库 add_executable(sayHello src/useHello.cpp) 添加可执行程序 target_link_libraries(sayHello hello) 链接库 set(CMAKE_BUILD_TYPE Release) 设置编译类型, 默认就是Release set(CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} -std=c++11&amp;quot;) 设置编译参数 set(CMAKE_CXX_STANDARD 11) ADD_DEFINITIONS(-DmacroName -DmacroName=macroValue ......) 设置宏 file(GLOB SRC_FILES src/*.c src/*.h) 生成一个匹配条件的文件列表 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/exec/) 设置可执行程序的生成目录 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib/) 设置动态库的生成目录 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib/static/) 设置静态库的生成目录 安装可执行程序或库: install( TARGETS hello1 hello2 RUNTIME DESTINATION bin ARCHIVE DESTINATION lib　#安装静态库到/usr/local/lib目录 LIBRARY DESTINATION lib　#安装动态库到/usr/local/lib目录 ) install( #安装头文件到/usr/local/include目录 FILES ${PROJECT_SOURCE_DIR}/include/hello.h DESTINATION include ) install( DIRECTORIES ${PROJECT_SOURCE_DIR}/include/utils DESTINATION include ) 执行一个command,生成${TEST_FILE}文件 add_custom_command(OUTPUT ${TEST_FILE} COMMAND echo &amp;quot;Generating log.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://imxood.github.io/post/arm-gcc%E6%B1%87%E7%BC%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://imxood.github.io/post/arm-gcc%E6%B1%87%E7%BC%96/</guid>
      <description> ARM-GCC-Inline-Assembler-Cookbook
一本非常好的ARM gcc inline Assembler书籍, 网上相关文章有点乱七八糟 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://imxood.github.io/post/driver/spi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://imxood.github.io/post/driver/spi/</guid>
      <description>CPOL: 极性 CPHA: 相位
miso
mosi
cs
clk
cs 片选</description>
    </item>
    
    <item>
      <title></title>
      <link>http://imxood.github.io/post/%E5%A4%A7%E7%A5%9E%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://imxood.github.io/post/%E5%A4%A7%E7%A5%9E%E8%B7%AF%E7%BA%BF/</guid>
      <description>以下摘自网络～
ARM+LINUX路线，主攻嵌入式Linux操作系统及其上应用软件开发目标：
（1） 掌握主流嵌入式微处理器的结构与原理（初步定为arm9）
（2） 必须掌握一个嵌入式操作系统 （初步定为uclinux或linux,版本待定）
（3） 必须熟悉嵌入式软件开发流程并至少做一个嵌入式软件项目。
从事嵌入式软件开发的好处是：
（1）目前国内外这方面的人都很稀缺。这一领域入门门槛较高，所以非专业IT人员很难切入这一领域；另一方面，是因为这一领域较新，目前发展太快，大多数人无条件接触。
（2）与企业计算等应用软件不同，嵌入式领域人才的工作强度通常低一些（但收入不低）。
（3）哪天若想创业，搞自已的产品，嵌入式不像应用软件那样容易被盗版。硬件设计一般都是请其它公司给订做（这叫“贴牌”：OEM），都是通用的硬件，我们只管设计软件就变成自己的产品了。
（4）兴趣所在，这是最主要的。
从事嵌入式软件开发的缺点是：
（1）入门起点较高，所用到的技术往往都有一定难度，若软硬件基础不好，特别是操作系统级软件功底不深，则可能不适于此行。
（2）这方面的企业数量要远少于企业计算类企业。
（3）有少数公司经常要硕士以上的人搞嵌入式，主要是基于嵌入式的难度。但大多数公司也并无此要求，只要有经验即可。
（4）平台依托强，换平台比较辛苦。
兴趣的由来：
1、成功观念不同，不虚度此生，就是我的成功。
2、喜欢思考，挑战逻辑思维。
3、喜欢C
C是一种能发挥思维极限的语言。关于C的精神的一些方面可以被概述成短句如下：
相信程序员。
不要阻止程序员做那些需要去做的。
保持语言短小精干。
一种方法做一个操作。
使得它运行的够快，尽管它并不能保证将是可移植的。
4、喜欢底层开发，讨厌vb类开发工具（并不是说vb不好）。
5、发展前景好，适合创业，不想自己要死了的时候还是一个工程师。
方法步骤：
1、基础知识：
目的：能看懂硬件工作原理，但重点在嵌入式软件，特别是操作系统级软件，那将是我的优势。
科目：数字电路、计算机组成原理、嵌入式微处理器结构。
汇编语言、C/C++、编译原理、离散数学。
数据结构和算法、操作系统、软件工程、网络、数据库。
方法：虽科目众多，但都是较简单的基础，且大部分已掌握。不一定全学，可根据需要选修。
主攻书籍：the c++ programming language（一直没时间读）、数据结构-C2。
2、学习linux：
目的： 深入掌握linux系统。
方法： 使用linux—〉linxu系统编程开发—〉驱动开发和分析linux内核。先看深，那主讲原理。看几遍后，看情景分析，对照深看，两本交叉，深是纲，情是目。剖析则是0.11版，适合学习。最后深入代码。
主攻书籍： linux内核完全剖析、unix环境高级编程、深入理解linux内核、情景分析和源代。
3、学习嵌入式linux：
目的：掌握嵌入式处理器其及系统。
方法：（1）嵌入式微处理器结构与应用：直接arm原理及汇编即可，不要重复x86。
（2）嵌入式操作系统类：ucOS/II简单，开源，可供入门。而后深入研究uClinux。
（3）必须有块开发板（arm9以上），有条件可参加培训（进步快，能认识些朋友）。
主攻书籍：毛德操的《嵌入式系统》及其他arm9手册与arm汇编指令等。
4、深入学习：
A、数字图像压缩技术： 主要是应掌握MPEG、mp3等编解码算法和技术。
B、通信协议及编程技术： TCP/IP协议、802.11，Bluetooth，GPRS、GSM、CDMA等。
C、网络与信息安全技术： 如加密技术，数字证书CA等。
D、DSP技术： Digital Signal Process，DSP处理器通过硬件实现数字信号处理算法。
说明：太多细节未说明，可根据实际情况调整。重点在于1、3，不必完全按照顺序作。对于学习c++，理由是c++不只是一种语言，一种工具，她还是一 种艺术，一种文化，一种哲学理念、但不是拿来炫耀得东西。对于linux内核，学习编程，读一些优秀代码也是有必要的。
注意：　要学会举一反多，有强大的基础，很多东西简单看看就能会。想成为合格的程序员，前提是必须熟练至少一种编程语言，并具有良好的逻辑思维。一定要理论结合实践。</description>
    </item>
    
  </channel>
</rss>