use nom::branch::alt;
use nom::bytes::complete::{is_not, take_till1};
use nom::combinator::{map, opt};
use nom::sequence::{pair, separated_pair};
use nom::IResult;

use css_parser_macro::{ToCss, Parser};

use crate::{
    color::Color,
    parse::{nom_char, skip_useless},
    types::*,
};

#[derive(Debug, PartialEq)]
pub enum Property {
    {%- for info in struct_infos -%}
        {{ pascal(text=info.name) }}({{ pascal(text=info.name) }}),
    {% endfor %}
}

impl crate::parse::Parser for Property {
    fn parse(i: &str) -> IResult<&str, Self> {
        let (i, i0) = is_not(";}")(i)?;
        let (_, (name, value)) = separated_pair(
            skip_useless(take_till1(|c: char| !c.is_alphanumeric() && c != '-')),
            skip_useless(nom_char(':')),
            skip_useless(take_till1(|c: char| c == ';')),
        )(i0)?;
        let (_, property) = match name {
            {%- for info in struct_infos -%}
                "{{ kebab(text=info.name) }}" => map(
                        {{ pascal(text=info.name) }}::parse,
                        |{{ snake(text=info.name) }}| Self::{{ pascal(text=info.name) }}({{ snake(text=info.name) }})
                    )(value),
            {% endfor %}
            _ => panic!("解析属性失败, property name: {}", name),
        }?;
        Ok((i, property))
    }
}

impl crate::serialize::ToCss for Property {
    fn to_css<W: core::fmt::Write>(&self, dest: &mut W) -> core::fmt::Result
    {
        match self {
            {%- for info in struct_infos -%}
                Self::{{ pascal(text=info.name) }}({{ snake(text=info.name) }}) => {
                    dest.write_str("{{ kebab(text=info.name) }}: ")?;
                    {{ snake(text=info.name) }}.to_css(dest)?;
                    dest.write_char(';')
                },
            {% endfor %}
        }
    }
}

{% for info in struct_infos %}
    pub fn {{ snake(text=info.name) }}(i: &str) -> Option<{{ pascal(text=info.name) }}> {
        let (_, v) = opt({{ pascal(text=info.name) }}::parse)(i).unwrap_or_default();
        v
    }
{% endfor %}

{% for info in struct_infos %}

    {% set name = pascal(text=info.name) %}

    pub fn parse_{{ snake(text=info.name) }}(i: &str) -> IResult<&str, {{ name }}> {
        {%- if info.struct_type == "struct" -%}
            let mut v = {{ name }}::default();
            let (i, _) = {{info.parser}}(i)?;
            Ok((i, v))
        {%- endif -%}
        {%- if info.struct_type == "enum" -%}
            {{info.parser}}(i)
        {% endif %}
    }

    {# impl crate::serialize::ToCss for {{ name }} {
        fn to_css<W: core::fmt::Write>(&self, dest: &mut W) -> core::fmt::Result
        {
            {%- if info.struct_type == "enum" -%}
                match self {
                    {%- for member in info.member_list -%}
                        Self::{{ pascal(text=member) }}(v) => v.to_css(dest),
                    {% endfor %}
                }
            {% endif %}
            {%- if info.struct_type == "struct" -%}
                {%- for member in info.member_list -%}
                    self.{{ snake(text=member) }}.to_css(dest)?;
                    {%- if not loop.last -%}
                        dest.write_char(' ')?;
                    {% endif %}
                {% endfor %}
                Ok(())
            {% endif %}
        }
    } #}
{% endfor %}
